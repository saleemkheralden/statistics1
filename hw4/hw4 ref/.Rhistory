plot(Qs, log(data.sorted))
# library("SciViews")
setwd('C://Users//Saleem//OneDrive - Technion//Data science//semester 3//statistics 1 - 094424//homeworks//hw4//hw4 ref')
file = read.csv('Optime.csv')
data = file$optime
n = length(data)
hist(data, freq=FALSE)
# Question 3 D
mean = sum(log(data, base = exp(1))) / n
var = sum((log(data, base=exp(1)) - mean)^2) / n
x = seq(0, 8, 0.1)
lines(x, f(x, mean, var), col='red')
f = function(x, mean, var) {
return((1/(x * sqrt(2 * pi * var))) * exp(-((log(x) - mean)^2/(2 * var))))
}
# Question 3 F
indcies = (1:n - 0.5) / n
Qs = qnorm(indcies)
expQs = exp(Qs)
ql = qlnorm(indcies)
data.sorted = sort(data)
plot(ql, data.sorted)
plot(expQs, data.sorted)
abline(mean, sqrt(var), col='red')
plot(Qs, log(data.sorted))
abline(mean, sqrt(var), col='red')
# G
qqnorm(log(data.sorted))
hist(data, breaks=15, freq=FALSE)
plot(Qs, log(data.sorted))
abline(mean, sqrt(var), col='red')
plot(expQs, data.sorted)
abline(mean, sqrt(var), col='red')
abline(mean, sqrt(var), col='red')
plot(Qs, log(data.sorted))
abline(mean, sqrt(var), col='red')
plot(expQs, data.sorted)
abline(mean, sqrt(var), col='red')
plot(expQs, data.sorted)
abline(0, 1, col='red')
plot(expQs, data.sorted)
plot(Qs, log(data.sorted))
abline(mean, sqrt(var), col='red')
plot(expQs, data.sorted)
abline(0, 1, col='red')
plot(expQs, data.sorted)
abline(0, exp(mean + 0.5 * var), col='red')
plot(expQs, data.sorted)
abline(exp(mean + 0.5 * var), 1, col='red')
abline(exp(mean + 0.5 * var), 0.2, col='red')
abline(exp(mean + 0.5 * var), 0.5, col='red')
plot(expQs, data.sorted)
abline(exp(mean + 0.5 * var), 0.5, col='red')
abline(exp(mean + 0.5 * var), 0.6, col='red')
plot(expQs, data.sorted)
abline(exp(mean + 0.5 * var), 0.6, col='red')
abline(exp(mean + 0.5 * var) - 0.2, 0.6, col='red')
abline(exp(mean + 0.5 * var) - 0.6, 0.6, col='red')
abline(exp(mean + 0.5 * var) - 0.8, 0.6, col='red')
abline(exp(mean + 0.5 * var) - 1, 0.6, col='red')
abline(exp(mean + 0.5 * var) - 1, 0.6, col='red')
plot(expQs, data.sorted)
abline(exp(mean + 0.5 * var) - 1, 0.6, col='red')
abline(exp(mean + 0.5 * var), 0.6, col='red')
plot(expQs, data.sorted)
abline(exp(mean + 0.5 * var), 0.6, col='red')
abline(exp(mean + 0.5 * var), 0.4, col='red')
abline(exp(mean + 0.5 * var), 0.5, col='red')
plot(expQs, data.sorted)
abline(exp(mean + 0.5 * var), 0.5, col='red')
plot(expQs, data.sorted)
plot(Qs, log(data.sorted))
abline(mean, sqrt(var), col='red')
plot(expQs, data.sorted)
Qs = qnorm(indcies, mean=mean, sd = sqrt(var))
expQs = exp(Qs)
data.sorted = sort(data)
plot(ql, data.sorted)
plot(expQs, data.sorted)
plot(Qs, log(data.sorted))
abline(mean, sqrt(var), col='red')
abline(0, 1, col='red')
plot(expQs, data.sorted)
abline(0, 1, col='red')
plot(Qs, log(data.sorted))
abline(mean, sqrt(var), col='red')
# G
qqnorm(log(data.sorted))
abline(mean, sqrt(var), col='red')
plot(Qs, log(data.sorted))
# G
qqnorm(log(data.sorted))
plot(Qs, log(data.sorted))
# G
qqnorm(log(data.sorted))
plot(expQs, data.sorted)
abline(0, 1, col='red')
plot(Qs, log(data.sorted))
abline(mean, sqrt(var), col='red')
# G
qqnorm(log(data.sorted))
abline(mean, sqrt(var), col='red')
plot(expQs, data.sorted)
abline(0, 1, col='red')
plot(Qs, log(data.sorted))
abline(0, 1, col='red')
# G
qqnorm(log(data.sorted))
abline(0, 1, col='red')
plot(Qs, log(data.sorted))
abline(0, 1, col='red')
# G
qqnorm(log(data.sorted))
abline(0, 1, col='red')
plot(Qs, log(data.sorted))
plot(Qs, log(data.sorted))
# G
qqnorm(log(data.sorted))
plot(Qs, log(data.sorted))
abline(0, 1, col='red')
plot(expQs, data.sorted)
plot(ql, data.sorted)
# library("SciViews")
setwd('C://Users//Saleem//OneDrive - Technion//Data science//semester 3//statistics 1 - 094424//homeworks//hw4//hw4 ref')
file = read.csv('Optime.csv')
data = file$optime
n = length(data)
hist(data, freq=FALSE)
# Question 3 D
mean = sum(log(data, base = exp(1))) / n
var = sum((log(data, base=exp(1)) - mean)^2) / n
x = seq(0, 8, 0.1)
lines(x, f(x, mean, var), col='red')
f = function(x, mean, var) {
return((1/(x * sqrt(2 * pi * var))) * exp(-((log(x) - mean)^2/(2 * var))))
}
# Question 3 F
indcies = (1:n - 0.5) / n
Qs = qnorm(indcies, mean=mean, sd = sqrt(var))
expQs = exp(Qs)
data.sorted = sort(data)
plot(expQs, data.sorted)
abline(0, 1, col='red')
plot(Qs, log(data.sorted))
abline(0, 1, col='red')
# G
qqnorm(log(data.sorted))
hist(data, breaks=15, freq=FALSE)
NormalQQ(data.sorted, mean, var)
NormalQQ = function(data, mean, var) {
indcies = (1:n - 0.5) / n
norm.q = qnorm(indcies, mean=mean, sd=sqrt(var))
log.data = log(data)
plot(norm.q, log.data)
abline(0, 1, col='red')
}
LogNormQQ = function(data, mean, var) {
indcies = (1:n - 0.5) / n
norm.q = qnorm(indcies, mean=mean, sd=sqrt(var))
lognorm.q = exp(norm.q)
plot(lognorm.q, data)
abline(0, 1, col='green')
}
NormalQQ(data.sorted, mean, var)
LogNormQQ(data.sorted, mean, var)
NormalQQ(data.sorted, mean, var)
# G
qqnorm(log(data.sorted))
abline(0, 1, col='green')
NormalQQ(data.sorted, mean, var)
LogNormQQ(data.sorted, mean, var)
NormalQQ(data.sorted, mean, var)
LogNormQQ(data.sorted, mean, var)
# G
qqnorm(log(data.sorted))
abline(mean, sqrt(var))
# G
qqnorm(log(data.sorted))
abline(mean, sqrt(var), col='red')
NormalQQ(data.sorted, mean, var)
# G
qqnorm(log(data.sorted), mean=mean, sd=sqrt(var))
abline(mean, sqrt(var), col='red')
NormalQQ(data.sorted, mean, var)
LogNormQQ(data.sorted, mean, var)
NormalQQ(data.sorted, mean, var)
LogNormQQ(data.sorted, mean, var)
# G
qqnorm(log(data.sorted), mean=mean, sd=sqrt(var))
abline(mean, sqrt(var), col='red')
NormalQQ(data.sorted, mean, var)
LogNormQQ(data.sorted, mean, var)
NormalQQ(data.sorted, mean, var)
# G
qqnorm(log(data.sorted), mean=mean, sd=sqrt(var))
abline(mean, sqrt(var), col='red')
NormalQQ = function(data, mean, var) {
indcies = (1:n - 0.5) / n
norm.q = qnorm(indcies, mean=mean, sd=sqrt(var))
log.data = log(data)
plot(norm.q, log.data)
abline(0, 1, col='red')
}
LogNormQQ = function(data, mean, var) {
indcies = (1:n - 0.5) / n
norm.q = qnorm(indcies, mean=mean, sd=sqrt(var))
lognorm.q = exp(norm.q)
plot(lognorm.q, data)
abline(0, 1, col='green')
}
NormalQQ(data.sorted, mean, var)
LogNormQQ(data.sorted, mean, var)
# G
qqnorm(log(data.sorted), mean=mean, sd=sqrt(var))
abline(mean, sqrt(var), col='red')
NormalQQ(data.sorted, mean, var)
NormalQQ(data.sorted, mean, var)
NormalQQ(data.sorted, mean, var)
LogNormQQ(data.sorted, mean, var)
# G
qqnorm(log(data.sorted), mean=mean, sd=sqrt(var))
NormalQQ(data.sorted, mean, var)
# G
qqnorm(log(data.sorted), mean=mean, sd=sqrt(var))
plot(lognorm.q, data)
NormalQQ(data.sorted, mean, var)
plot(lognorm.q, data)
lognorm.q = exp(norm.q)
plot(lognorm.q, data)
norm.q = qnorm(indcies, mean=mean, sd=sqrt(var))
lognorm.q = exp(norm.q)
norm.q = qnorm(indcies, mean=mean, sd=sqrt(var))
lognorm.q = exp(norm.q)
indcies = (1:n - 0.5) / n
norm.q = qnorm(indcies, mean=mean, sd=sqrt(var))
lognorm.q = exp(norm.q)
indcies = (1:n - 0.5) / n
norm.q = qnorm(indcies, mean=mean, sd=sqrt(var))
lognorm.q = exp(norm.q)
plot(lognorm.q, data)
NormalQQ(data.sorted, mean, var)
LogNormQQ = function(data, mean, var) {
indcies = (1:n - 0.5) / n
norm.q = qnorm(indcies, mean=mean, sd=sqrt(var))
lognorm.q = exp(norm.q)
plot(lognorm.q, data)
#abline(0, 1, col='green')
}
NormalQQ(data.sorted, mean, var)
NormalQQ(data.sorted, mean, var)
NormalQQ = function(data, mean, var) {
indcies = (1:n - 0.5) / n
norm.q = qnorm(indcies, mean=mean, sd=sqrt(var))
log.data = log(data)
plot(norm.q, log.data)
#abline(0, 1, col='red')
}
NormalQQ(data.sorted, mean, var)
# G
qqnorm(log(data.sorted), mean=mean, sd=sqrt(var))
NormalQQ(data.sorted, mean, var)
# G
qqnorm(log(data.sorted), mean=mean, sd=sqrt(var))
NormalQQ = function(data, mean, var) {
indcies = (1:n - 0.5) / n
norm.q = qnorm(indcies, mean=mean, sd=sqrt(var))
log.data = log(sort(data))
qqnorm(log.data, mean=mean, sd=sqrt(var))
#abline(0, 1, col='red')
}
NormalQQ(data.sorted, mean, var)
LogNormQQ(data.sorted, mean, var)
NormalQQ = function(data, mean, var) {
indcies = (1:n - 0.5) / n
norm.q = qnorm(indcies, mean=mean, sd=sqrt(var))
log.data = log(sort(data))
qqnorm(log.data, mean=mean, sd=sqrt(var))
#abline(0, 1, col='red')
}
LogNormQQ = function(data, mean, var) {
indcies = (1:n - 0.5) / n
norm.q = qnorm(indcies, mean=mean, sd=sqrt(var))
lognorm.q = exp(norm.q)
plot(lognorm.q, data)
abline(0, 1, col='green')
}
NormalQQ(data.sorted, mean, var)
# G
qqnorm(log(data.sorted), mean=mean, sd=sqrt(var))
LogNormQQ(data.sorted, mean, var)
NormalQQ = function(data, mean, var) {
indcies = (1:n - 0.5) / n
norm.q = qnorm(indcies, mean=mean, sd=sqrt(var))
log.data = log(sort(data))
qqnorm(log.data, mean=mean, sd=sqrt(var))
abline(0, 1, col='red')
}
LogNormQQ = function(data, mean, var) {
indcies = (1:n - 0.5) / n
norm.q = qnorm(indcies, mean=mean, sd=sqrt(var))
lognorm.q = exp(norm.q)
plot(lognorm.q, data)
abline(0, 1, col='green')
}
NormalQQ(data.sorted, mean, var)
LogNormQQ(data.sorted, mean, var)
NormalQQ(data.sorted, mean, var)
NormalQQ = function(data, mean, var) {
indcies = (1:n - 0.5) / n
norm.q = qnorm(indcies, mean=mean, sd=sqrt(var))
log.data = log(sort(data))
qqnorm(log.data, mean=mean, sd=sqrt(var))
abline(mean, sqrt(var), col='red')
}
LogNormQQ = function(data, mean, var) {
indcies = (1:n - 0.5) / n
norm.q = qnorm(indcies, mean=mean, sd=sqrt(var))
lognorm.q = exp(norm.q)
plot(lognorm.q, data)
abline(0, 1, col='green')
}
NormalQQ(data.sorted, mean, var)
LogNormQQ = function(data, mean, var) {
indcies = (1:n - 0.5) / n
norm.q = qnorm(indcies, mean=mean, sd=sqrt(var))
lognorm.q = exp(norm.q)
plot(lognorm.q, data)
abline(0, 1, col='green')
}
LogNormQQ(data.sorted, mean, var)
hist(data, breaks=15, freq=FALSE)
mean = sum(log(data, base=exp(1))) / n
var = sum((log(data, base=exp(1)) - mean)^2) / n
mean
var
f = function(x, mean, var) {
return((1/(x * sqrt(2 * pi * var))) * exp(-((log(x) - mean)^2/(2 * var))))
}
hist(data, breaks=15, freq=FALSE)
x = seq(0, 8, 0.1)
lines(x, f(x, mean, var), col='red')
b = sum(data) / sum((data - mean) ^ 2)
a = (sum(data))^2 / (n * sum((data - mean) ^ 2))
a
b
pgamma(x, a, b)
lines(x, pgamma(x, a, b), col='green')
lines(x, pgamma(x, b, a), col='green')
lines(x, pgamma(data, rate=b, scale=a), col='green')
lines(x, pgamma(data, rate=b), col='green')
hist(data, breaks=15, freq=FALSE)
x = seq(0, 8, 0.1)
lines(x, f(x, mean, var), col='red')
mean = sum(log(data, base=exp(1))) / n
var = sum((log(data, base=exp(1)) - mean)^2) / n
f = function(x, mean, var) {
return((1/(x * sqrt(2 * pi * var))) * exp(-((log(x) - mean)^2/(2 * var))))
}
b = sum(data) / sum((data - mean) ^ 2)
a = (sum(data))^2 / (n * sum((data - mean) ^ 2))
lines(x, pgamma(data, rate=b), col='green')
hist(data, breaks=15, freq=FALSE, col='pink')
hist(data, breaks=15, freq=FALSE, col='pink')
x = seq(0, 8, 0.1)
lines(x, f(x, mean, var), col='red')
mean = sum(log(data, base=exp(1))) / n
var = sum((log(data, base=exp(1)) - mean)^2) / n
f = function(x, mean, var) {
return((1/(x * sqrt(2 * pi * var))) * exp(-((log(x) - mean)^2/(2 * var))))
}
b = sum(data) / sum((data - mean) ^ 2)
a = (sum(data))^2 / (n * sum((data - mean) ^ 2))
lines(x, pgamma(data, rate=b), col='green')
lines(x, f(x, mean, var), col='green')
lines(x, f(x, mean, var), col='black')
pgamma(data, alpha=a, beta=b)
pgamma(data, a, b)
lines(x, pgamma(data, a, b))
lines(x, pgamma(x, a, b))
lines(x, dgamma(x, a, b), col='green')
x = seq(0, 8, 0.1)
lines(x, f(x, mean, var), col='black')
hist(data, breaks=15, freq=FALSE, col='pink')
mean = sum(log(data, base=exp(1))) / n
var = sum((log(data, base=exp(1)) - mean)^2) / n
f = function(x, mean, var) {
return((1/(x * sqrt(2 * pi * var))) * exp(-((log(x) - mean)^2/(2 * var))))
}
b = sum(data) / sum((data - mean) ^ 2)
a = (sum(data))^2 / (n * sum((data - mean) ^ 2))
x = seq(0, 8, 0.1)
lines(x, f(x, mean, var), col='black')
lines(x, dgamma(x, a, b), col='green')
hist(data, breaks=15, freq=FALSE, col='blue')
hist(data, breaks=15, freq=FALSE, col='light blue')
hist(data, breaks=15, freq=FALSE, col='light blue')
mean = sum(log(data, base=exp(1))) / n
var = sum((log(data, base=exp(1)) - mean)^2) / n
f = function(x, mean, var) {
return((1/(x * sqrt(2 * pi * var))) * exp(-((log(x) - mean)^2/(2 * var))))
}
b = sum(data) / sum((data - mean) ^ 2)
a = (sum(data))^2 / (n * sum((data - mean) ^ 2))
x = seq(0, 8, 0.1)
lines(x, f(x, mean, var), col='black')
lines(x, dgamma(x, a, b), col='green')
lines(x, dgamma(x, a, b), col='dark green')
lines(x, f(x, mean, var), col='pink')
lines(x, f(x, mean, var), col='red')
hist(data, breaks=15, freq=FALSE, col='light blue')
mean = sum(log(data, base=exp(1))) / n
var = sum((log(data, base=exp(1)) - mean)^2) / n
f = function(x, mean, var) {
return((1/(x * sqrt(2 * pi * var))) * exp(-((log(x) - mean)^2/(2 * var))))
}
b = sum(data) / sum((data - mean) ^ 2)
a = (sum(data))^2 / (n * sum((data - mean) ^ 2))
x = seq(0, 8, 0.1)
lines(x, f(x, mean, var), col='red')
lines(x, dgamma(x, a, b), col='dark green')
data > 2
sum(data > 2)
sum(data > 2) / n
lines(x, dlnorm(x, mean=mean, sd=sqrt(var)), col='red')
# library("SciViews")
setwd('C://Users//Saleem//OneDrive - Technion//Data science//semester 3//statistics 1 - 094424//homeworks//hw4//hw4 ref')
file = read.csv('Optime.csv')
data = file$optime
n = length(data)
hist(data, freq=FALSE)
# Question 3 D
mean = sum(log(data, base=exp(1))) / n
var = sum((log(data, base=exp(1)) - mean)^2) / n
mean
var
# Question 3 F
NormalQQ = function(data, mean, var) {
indcies = (1:n - 0.5) / n
norm.q = qnorm(indcies, mean=mean, sd=sqrt(var))
log.data = log(sort(data))
qqnorm(log.data, mean=mean, sd=sqrt(var))
abline(mean, sqrt(var), col='red')
}
NormalQQ(data.sorted, mean, var)
LogNormQQ = function(data, mean, var) {
indcies = (1:n - 0.5) / n
norm.q = qnorm(indcies, mean=mean, sd=sqrt(var))
lognorm.q = exp(norm.q)
plot(lognorm.q, data)
abline(0, 1, col='green')
}
LogNormQQ(data.sorted, mean, var)
hist(data, breaks=15, freq=FALSE, col='light blue')
mean = sum(log(data, base=exp(1))) / n
var = sum((log(data, base=exp(1)) - mean)^2) / n
b = sum(data) / sum((data - mean) ^ 2)
a = (sum(data))^2 / (n * sum((data - mean) ^ 2))
x = seq(0, 8, 0.1)
lines(x, dlnorm(x, mean=mean, sd=sqrt(var)), col='red')
lines(x, dgamma(x, a, b), col='dark green')
sum(data > 2) / n
hist(data, breaks=15, freq=FALSE, col='light blue')
mean = sum(log(data, base=exp(1))) / n
var = sum((log(data, base=exp(1)) - mean)^2) / n
b = sum(data) / sum((data - mean) ^ 2)
a = (sum(data))^2 / (n * sum((data - mean) ^ 2))
x = seq(0, 8, 0.1)
lines(x, dlnorm(x, mean=mean, sd=sqrt(var)), col='red')
lines(x, dgamma(x, a, b), col='dark green')
M1 = mean(data)
M2 = sum(data^2) / n
b = M1^2/(M2-M1^2)
a = M1^2/(M2-M1^2)
b = sum(data) / sum((data - M1) ^ 2)
a = (sum(data))^2 / (n * sum((data - M1) ^ 2))
x = seq(0, 8, 0.1)
lines(x, dlnorm(x, mean=mean, sd=sqrt(var)), col='red')
lines(x, dgamma(x, a, b), col='dark green')
hist(data, breaks=15, freq=FALSE, col='light blue')
hist(data, breaks=15, freq=FALSE, col='light blue')
M1 = mean(data)
M2 = sum(data^2) / n
b = sum(data) / sum((data - M1) ^ 2)
a = (sum(data))^2 / (n * sum((data - M1) ^ 2))
x = seq(0, 8, 0.1)
lines(x, dlnorm(x, mean=mean, sd=sqrt(var)), col='red')
lines(x, dgamma(x, a, b), col='dark green')
b = sum(data) / sum((data - M1) ^ 2)
a = (sum(data))^2 / (n * sum((data - M1) ^ 2))
b
a
