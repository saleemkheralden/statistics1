mean(z1)
var(z1)
sd(z1)
sqrt(var(z1))
z2 = rnorm(10, mean=10, sd=.1)
z2
x = seq(-4, 4, 0.01)
x
y = dnorm(x)
y
dnrom(1)
dnorm(1)
dnorm(2)
dnorm(55)
dnorm(53)
dnorm(0.1)
dnorm(0)
dnorm(0.5)
dnorm(-10)
dnorm(-0.1)
dnorm(-0.05)
dnorm(-0.4)
pnorm(0)
pnorm(3.57)
pbinom(1)
pbinom(3, size=2)
pbinom(3, size=2, prob = 2)
pbinom(3, size=5, prob=0.5)
pbinom(5, size=5, prob=0.5)
pnorm(3)
pnorm(3, mean=0, sd=1)
qnorm(3)
qnorm(0.5)
dnorm(3)
dnorm(0)
dnorm(0, mean=0, sd=1)
dnorm(0, mean=0, sd=1)
x
y
plot(x, y, type="1")
plot(x, y, type='1')
plot(x, y)
y2 = dunif(x, -2, 2)
lines(x, y2, col='red')
plot(x, y2)
lines(x, y2, col='red')
x
y3 = dexp(x, rate=2)
plot(x, y3)
pnrom(0)
pnrom(0.5)
pnorm(0)
pnrom(x)
pnorm(x)
Y3 = pexp(x, rate=3)
plot(x, Y3)
x = seq(-4, 4, 0.01)
x
x = -4:4:0.01
x
x 1:3
x = 1:3
x
x = seq(-4, 4, 0.01)
y = dnorm(x)
y2 = dunif(x, -4, 4)
plot(x, y)
lines(x, y2)
y2 = dunif(x, -2, 2)
lines(x, y2)
plot(x, y)
lines(x, y2)
dim(data)
names(data)
# Create a sequence of numbers
w = seq(1, 10)
statistics(2, 0.5, 30)
# Create a sequence of numbers
w = seq(1, 10)
w
w = 1:10
w
# Create a vector variable using "<-"
x <- c(1,2,3,4)
x
# Create a vector variable using "="
y = c(1,2,3,4)
y
# List variables
ls()
# Basic math
x + y
sqrt(x)
x^2
# Help command
?rnorm
# Statistic functions
set.seed(1)
z1 = rnorm(10)
z1
mean(z1)
var(z1)
sd(z1)
sqrt(var(z1))
z2 = rnorm(10, mean=10, sd=.1)
z2
# Plotting:
x = seq(-4,4, 0.01)
y = dnorm(x)
plot(x,y, type='l')
y2 = dunif(x, -2, 2)
lines(x, y2, col='red')
# Work with data frames:
data = read.csv("Data.csv", header=T)
View(data)
# R can't open files with hebrew letters:
data = read.csv("Data.csv", header = T)
# Change working directory:
# setwd("")
dim(data)
names(data)
data = na.omit(data)
write.csv(data, "New_Data.csv")
head(data)
data[3:7,]
head(data[c('age', 'earnings')])
attach(data)
plot(female, earnings)
# Functions:
statistics = function(mu, sigma, n){
x = rnorm(n, mu, sigma)
return(c(mean(x), sd(x)))
}
statistics(0, 1, 10)
statistics(2, 0.5, 30)
View(data)
d = read.csv("Data.csv", header=T)
setwd("תרגול 1-20211027")
v <- c(seq(1:10))
v
v <- c(seq(1,10))
v
v <- c(1,10)
v
v <- c(1:10)
v
v <- 1:10
v
type(v)
print(type(v))
print(class(v))
v <- c(1:10)
print(class(v))
plot(x, y)
plot(x, y2)
plot(x, y)
lines(x, y, color="green")
lines(x, y, c="green")
lines(x, y)
lines(x, y, col='red')
lines(x, y, col="red")
lines(x, y2, col="red")
data$age
data.age
data$age
data[age]
getwd()
setdw("C:\Users\SLIMS-PC\OneDrive - Technion\Data science\semester 3\סטטיסטיקה 1 - 094424\תרגולים\תרגול 2-20211102")
Grades <- read.csv("C:/Users/SLIMS-PC/OneDrive - Technion/Data science/semester 3/סטטיסטיקה 1 - 094424/תרגולים/תרגול 2-20211102/Grades.csv", sep="")
View(Grades)
grades = as.numeric(unlist(Grades))
grades
View(Grades)
View(Grades)
intervals = seq(40,100,10)
h = hist(grades, breaks=intervals, xlab="Grades", col="blue")
frequencies = rep(0, length(intervals) - 1)
for (i in 1:length(frequencies)){
frequencies[i] = sum(grades >= intervals[i] & grades < intervals[i+1])
}
r.frequencies = round(frequencies / length(grades), 3)
r.cumsum = cumsum(r.frequencies)
r.cumsum
frequencies
vec <- c(1, 1, 2, 3)
rep(vec)
frequencies
length(intervals)
rep(0, length(intervals) - 1)
rep(3, 5)
sum()
sum(1)
frequencies
print(frequencies)
print(frequencies[0])
print(frequencies[1])
print(1, frequencies[0])
print(1 + frequencies[0])
print(1 + frequencies[1])
print(1 + " " + frequencies[1])
frequencies = rep(0, length(intervals) - 1)
for (i in 1:length(frequencies)){
frequencies[i] = sum(grades >= intervals[i] & grades < intervals[i+1])
print(frequencies[i])
}
grades >= 30
grades >= 80
grades >= 100
r.frequencies
frequencies / length(grades)
r.sum
r.cumsum
r.cumsum
r.cumsum
r.cumsum
r.cumsum
r.cumsum
rep(vec, 2)
rep(vec, 5)
vec = 1, 1, 23
vec = (1, 1, 23)
vec = (c1, 1, 23)
vec = c(1, 1, 23)
vec = (1, 1, 23)
rep(vec, 5)
rep(vec, 1)
h = hist(grades, breaks=seq(0, 100, 10), xlab="Grades", col="blue")
# create a histogram
h = hist(grades, breaks=seq(40, 100, 10), xlab="Grades", col="blue")
# create a histogram
h = hist(grades, breaks=seq(40, 100, 20), xlab="Grades", col="blue")
# create a histogram
h = hist(grades, breaks=seq(40, 100, 5), xlab="Grades", col="blue")
# create a histogram
h = hist(grades, breaks=seq(40, 100, 1), xlab="Grades", col="blue")
# create a histogram
h = hist(grades, breaks=intervals, xlab="Grades", col="blue")
mean = mean(grades)
mean
median = median(grades)
median
quantiles = quantile(grades)
quantiles
var = var(grades)
var
std = sd(grades)
std
summary(grades)
min = range(grades)[1]
min
max = range(grades)[2]
max
range_of_values = max-min
range_of_values
Q1=quantile(grades,0.25)
Q3=quantile(grades,0.75)
range_of_quarters = Q3-Q1
range_of_quarters
Q1
quantile(grades, 0)
quantile(grades, 1)
quantile(grades, 0.5)
boxplot(grades)
points(mean, pch="*")
steps = 1.5*(Q3-Q1)
steps
Q3 + steps
Q1 - steps
table(grades)
# Q1 D
boxplot(grades, horizontal=TRUE)
boxplot(grades, horizontal=TRUE)
points(mean, pch="*")
mean = mean(grades)
mean
points(mean, pch="*")
boxplot(grades)
points(mean, pch="*")
, horizontal=TRUE
boxplot(grades, horizontal=TRUE)
points(mean, pch="*")
mean
points(mean, pch="*")
points(mean, pch="*")
plot()
plot(grades)
lines(grades)
plot(grades)
lines(1, grades[1])
lines(1, grades[1], 63, 100)
lines(x, y)
x = c(1, 63)
y = c(grades[1], grades[60])
lines(x, y)
x = c(1, 60)
y = c(grades[1], grades[60])
lines(x, y)
x = c(1, 60)
y = c(grades[1], grades[60])
lines(x, y)
plot(grades)
plot(grades)
lines(grades)
my.qqplot=function(x){
n=length(x)
val=((1:n-1/2)/n)
x.sort=sort(x)
norm.q=qnorm(val)
plot(norm.q,x.sort)
}
my.qqplot(grades)
abline(mean(grades),sd(grades),col="blue")
my.qqplot=function(x){
n=length(x)
val=((1:n-1/2)/n)
x.sort=sort(x)
norm.q=qnorm(val)
lines(norm.q, x.sort)
plot(norm.q,x.sort)
}
my.qqplot(grades)
abline(mean(grades),sd(grades),col="blue")
x.sort
num_samples=2000
sample_size=2000
vec=rep(0, sample_size*num_samples)
mat=matrix(vec, nrow=sample_size, ncol=num_samples)
m1vec=rep(0, num_samples)
m2vec=rep(0, num_samples)
varVec=rep(0, num_samples)
for (j in 1:num_samples){
sample=rnorm(sample_size)
mat[ ,j]=sample
m1vec[j]=mean(sample)
m2vec[j]=mean(sample^2)
varVec[j]=var(sample)
}
x=seq(-3,3, 0.01)
hist(m1vec, freq=FALSE, ylim=c(0,1))
lines(x, dnorm(x, 0, 1/sqrt(sample_size)), col="blue")
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
H1 <- hist(m2vec, plot=FALSE)
H2 <- hist(varVec, plot=FALSE)
y = seq(0, 5, 0.0001)
plot(H1, freq=FALSE, col=c1)
plot(H2, freq=FALSE, col=c2, add=TRUE)
lines(y, dnorm(y, mean(m2vec), sqrt(var(m2vec))))
mean(m2vec)
mean(varVec)
lim = 2000
m = 2
avgs = rep(0, lim)
for (i in 1:lim) {
samp = rnorm(i, mean=m)
avgs[i] = mean(samp)
}
plot(1:lim, avgs)
lines(c(0, lim), c(m, m), col="red")
lim = 2000
samp_size = 5
m = 2
avgs = rep(0, lim)
MS = rep(0, lim)
for (mi in 1:lim) {
for (i in 1:mi) {
samp = rnorm(samp_size, mean=m)
avgs[i] = mean(samp)
}
MS[mi] = mean(avgs[1:mi])
}
plot(1:lim, MS)
lines(c(0, lim), c(m, m), col="red")
lim = 2000
samp_size = 5
m = 2
avgs = rep(0, lim)
MS = rep(0, lim)
for (mi in 1:lim) {
for (i in 1:mi) {
samp = rnorm(samp_size, mean=m)
avgs[i] = mean(samp)
}
MS[mi] = mean(avgs[1:mi])
}
plot(1:lim, MS)
lines(c(0, lim), c(m, m), col="red")
lim = 2000
samp_size = 5
m = 2
avgs = rep(0, lim)
MS = rep(0, lim)
for (mi in 1:lim) {
for (i in 1:mi) {
samp = rnorm(samp_size, mean=m)
avgs[i] = mean(samp)
}
MS[mi] = mean(avgs[1:mi])
}
plot(1:lim, MS)
lines(c(0, lim), c(m, m), col="red")
setwd('C://Users//SLIMS-PC//OneDrive - Technion//Data science//semester 3//statistics 1 - 094424//homeworks//hw1')
file = read.csv('Prices.csv')
hist(file$Price, breaks=seq(0.1, 7.1, 0.1), xlim=c(0.1, 7.1), freq=FALSE, col='green')
setwd('C://Users//SLIMS-PC//OneDrive - Technion//Data science//semester 3//statistics 1 - 094424//homeworks//hw1')
file = read.csv('Prices.csv')
getSrcDirectory()
getSrcDirectory()[1]
setwd('C://Users//SLIMS-PC//OneDrive - Technion//Data science//semester 3//statistics 1 - 094424//homeworks//hw1//hw1 ref')
file = read.csv('Prices.csv')
hist(file$Price, breaks=seq(0.1, 7.1, 0.1), xlim=c(0.1, 7.1), freq=FALSE, col='green')
boxplot(X, horizontal=TRUE)
step = 1.5 * (Q3 - Q1)
step
LF = Q1 - step
UF = Q3 + step
LF
UF
LW = 0
for (i in 1:length(X)) {
if (X[i] >= LF) {
LW = X[i]
break
}
}
UW = 0
for (i in length(X):1) {
if (X[i] <= UF) {
UW = X[i]
break
}
}
as.numeric(UF)
UW
LW
X = sort(file$Price)
boxplot(X, horizontal=TRUE)
step = 1.5 * (Q3 - Q1)
step
LF = Q1 - step
UF = Q3 + step
LF
UF
LW = 0
for (i in 1:length(X)) {
if (X[i] >= LF) {
LW = X[i]
break
}
}
UW = 0
for (i in length(X):1) {
if (X[i] <= UF) {
UW = X[i]
break
}
}
as.numeric(UF)
UW
LW
UW
LW
LF
UF
LF = Q1 - step
UF = Q3 + step
Q1 = quantile(X, prob=0.25)
Q3 = quantile(X, prob=0.75)
Q1
Q3
step = 1.5 * (Q3 - Q1)
step
LF = Q1 - step
UF = Q3 + step
LF
UF
LW = 0
for (i in 1:length(X)) {
if (X[i] >= LF) {
LW = X[i]
break
}
}
UW = 0
for (i in length(X):1) {
if (X[i] <= UF) {
UW = X[i]
break
}
}
as.numeric(UF)
UW
LW
table(X)
LF
outter = sum(X < LF || X > UF)
outter
x
X
X < LF
X < LF || X > UF
X > LF && X < UF
X > LF & X < UF
X > LF | X < UF
outter = sum(X < LF | X > UF)
outter
outter = sum(X < LF | X > UF)
outter
X > LF | X < UF
X < LF | X > UF
outter = sum(X < LF | X > UF)
outter
